{
  "_args": [
    [
      {
        "raw": "flickrapi",
        "scope": null,
        "escapedName": "flickrapi",
        "name": "flickrapi",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "E:\\Workspace\\krishdev 3.0"
    ]
  ],
  "_from": "flickrapi@latest",
  "_id": "flickrapi@0.6.0",
  "_inCache": true,
  "_location": "/flickrapi",
  "_nodeVersion": "6.2.2",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/flickrapi-0.6.0.tgz_1471803840357_0.013850397430360317"
  },
  "_npmUser": {
    "name": "pomax",
    "email": "pomax@nihongoresources.com"
  },
  "_npmVersion": "3.9.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "flickrapi",
    "scope": null,
    "escapedName": "flickrapi",
    "name": "flickrapi",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/flickrapi/-/flickrapi-0.6.0.tgz",
  "_shasum": "590400e27758828337daf269d93b5ea78816635f",
  "_shrinkwrap": null,
  "_spec": "flickrapi",
  "_where": "E:\\Workspace\\krishdev 3.0",
  "author": {
    "name": "Pomax",
    "email": "pomax@nihongoresources.com"
  },
  "bugs": {
    "url": "https://github.com/Pomax/node-flickrapi/issues"
  },
  "dependencies": {
    "async": "~0.2.10",
    "glob": "~3.2.6",
    "open": "0.0.x",
    "progress": "1.1.4",
    "prompt": "0.2.x",
    "request": "2.26.x"
  },
  "description": "A Node.js, and client-side, implementation of the Flickr API (for use with an API key, server-side oauth enabled)",
  "devDependencies": {
    "express": "~3.4.7",
    "grunt": "~0.4.1",
    "grunt-contrib-jshint": "~0.6.3",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-uglify": "~0.2.2",
    "habitat": "~1.1.0"
  },
  "directories": {},
  "dist": {
    "shasum": "590400e27758828337daf269d93b5ea78816635f",
    "tarball": "https://registry.npmjs.org/flickrapi/-/flickrapi-0.6.0.tgz"
  },
  "engines": {
    "node": ">=0.12"
  },
  "gitHead": "6c3acbb7606e7e97de928feac98758dc5521ec18",
  "homepage": "https://github.com/Pomax/node-flickrapi#readme",
  "keywords": [
    "flickrapi",
    "flickr",
    "api",
    "oauth"
  ],
  "license": "MIT",
  "main": "./src/FlickrAPI",
  "maintainers": [
    {
      "name": "pomax",
      "email": "pomax@nihongoresources.com"
    }
  ],
  "name": "flickrapi",
  "optionalDependencies": {},
  "readme": "# A Node.js and browser Flickr API library\n\nWith oauth authentication for Flickr API keys if you're using it server-side (authenticated calls from the browser are too insecure to support for the moment, and will throw an error).\n\nYou also get API route proxying so you can call the Flickr methods through your own server and get Flickr responses back for free. Super handy!\n\n# Quick start guide:\n\nYou don't want to read this entire README.md, so just find what you want to do in this handy quick start guide right here at the start of the README, and off you go!\n\n## In the browser with client-side credentials:\n\nScript-load the `browser/flickrapi.dev.js` library for development work, and use the `browser/flickrapi.js` library in production.\n\nYou can access Flickr by creating an API instance as:\n\n```\nvar flickr = new Flickr({\n  api_key: \"1234ABCD1234ABCD1234ABCD1234ABCD\"\n});\n```\n\nThen query Flickr using the API as described over at http://www.flickr.com/services/api - for instance, to search for all photographs that text-match the terms \"red panda\", you call:\n\n```\nflickr.photos.search({\n  text: \"red+panda\"\n}, function(err, result) {\n  if(err) { throw new Error(err); }\n  // do something with result\n}\n```\nAll calls are asynchronous, and the callback handling function always has two arguments. The first, if an error occurs, is the error generated by Flickr; the second, if the call succeeds, is the result sent back from Flickr, as plain JavaScript object.\n\n**Note**: this is not secure. People will be able to see your API key, and this is pretty much *the worst idea(tm)*, so you probably want to use this library...\n\n## In the browser, securely via proxied API calls:\n\nScript-load the `browser/flickrapi.dev.js` library for development work, and use the `browser/flickrapi.js` library in production, but don't use your API key. Instead, point to your server as a flickr API proxy:\n\n```\nvar flickr = new Flickr({\n  endpoint: \"http//yourhostedplace/services/rest/\"\n});\n```\n\nTo make this work, have flickapi running on your server with a proxy route enabled, and you'll be able to make use of all the Flickr API calls, without having to put your credentials anywhere in your client-side source code.\n\nProxy mode is explained [below](#Flickr_API_proxying_for_connect/express_apps), but is essentially a one-liner add to your regular connect/express app.\n\n## As a module in a (larger) Node.js program\n\nInstall like any other package:\n```\n$> npm install flickrapi --save\n```\nAfter that, you have two choices, based on whether you want to authenticate or not. Both approaches require an API key, but using OAuth2 authentication means you get access to the full API, rather than only the public API.\n\nTo suppress the progress bars in stdout you can include a `progress` attribute when initializing:\n\n```\nvar flickr = new Flickr({\n    api_key: \"1234ABCD1234ABCD1234ABCD1234ABCD\",\n    progress: false\n});\n```\n\n### No authentication, public API only\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = {\n      api_key: \"API key that you get from Flickr\",\n      secret: \"API key secret that you get from Flickr\"\n    };\n\nFlickr.tokenOnly(flickrOptions, function(error, flickr) {\n  // we can now use \"flickr\" as our API object,\n  // but we can only call public methods and access public data\n});\n```\n\n### Authenticated, full Flickr API access\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = {\n      api_key: \"API key that you get from Flickr\",\n      secret: \"API key secret that you get from Flickr\"\n    };\n\nFlickr.authenticate(flickrOptions, function(error, flickr) {\n  // we can now use \"flickr\" as our API object\n});\n```\n\n### As flickrapi internally uses the request module, you can also pass default options for request that are accepted by request.defaults() as documented in the [request module](https://github.com/request/request#requestdefaultsoptions)\n\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = {\n      api_key: \"API key that you get from Flickr\",\n      secret: \"API key secret that you get from Flickr\",\n      requestOptions: {\n        timeout: 20000,\n        /* other default options accepted by request.defaults */\n      }\n    };\n\nFlickr.tokenOnly(flickrOptions, function(error, flickr) {\n  // we can now use \"flickr\" as our API object,\n  // but we can only call public methods and access public data\n});\n\n```\n\n# The end.\n\nThat's it, that's all the quickstart guiding you need. For more detailed information, keep reading. If you just wanted to get up and running, then the preceding text should have gotten you there!\n\n---\n\n# What to do now that you have the library loaded\n\n\n## Call some API functions\n\ncalling API functions is then a matter of calling the functions as they are listed on http://www.flickr.com/services/api, so if you wish to get all your own photos, you would call:\n\n```\nflickr.photos.search({\n  user_id: flickr.options.user_id,\n  page: 1,\n  per_page: 500\n}, function(err, result) {\n  // result is Flickr's response\n});\n```\n## Call functions that don't *require* authentication, authenticated anyway\n\nSimply add an `authenticated: true` pair to your function call. Compare:\n\n```\nflickr.people.getPhotos({\n  api_key: ...\n  user_id: <your own ID>\n  page: 1,\n  per_page: 100\n}, function(err, result) {\n  /*\n    This will give public results only, even if we used\n    Flickr.authenticate(), because the function does not\n    *require* authentication to run. It just runs with\n    fewer permissions.\n  */\n});\n```\n\nTo:\n\n```\nflickr.people.getPhotos({\n  api_key: ...\n  user_id: <your own ID>\n  authenticated: true,\n  page: 1,\n  per_page: 100\n}, function(err, result) {\n  /*\n    This will now give all public and private results,\n    because we explicitly ran this as an authenticated call\n  */\n});\n```\n\n\n## Proxy the Flickr API\n\nIf your app is a [connect](https://github.com/senchalabs/connect) or [express](http://expressjs.com) app, you get Flickr API proxying\nfor free.\n\nSimply use the `.proxy()` function to set everything up and then call your own API route in the same way you would call the Flickr API, minus the security credentials, since the servers side Flickr api object already has those baked in.\n\nAs an example, the test.js script for node-flickrapi uses the following code to set up the local API route:\n\n```\nvar express = require(\"express\");\n\nFlickr.authenticate(FlickrOptions, function(error, flickr) {\n  var app = express();\n  app.configure(function() {\n    ...\n    flickr.proxy(app, \"/service/rest\");\n    ...\n  });\n  ...\n});\n```\n\nThis turns the `/service/rest` route into a full Flickr API proxy, which the browser library can talk to, using `POST` operations.\n\nTo verify your proxy route works, simply use `cURL` in the following fashion:\n\n```\ncurl -X POST -H \"Content-Type: application/json\"\n             -d '{\"method\":\"flickr.photos.search\", \"text\":\"red+pandas\"}'\n             http://127.0.0.1:3000/service/rest/\n```\n\nNote that the proxy is \"open\" in that there is no explicit user management. If you want to make sure only \"logged in users\" get to use your API proxy route, you can pass an authentication middleware function as third argument to the `.proxy` function:\n\n```\nfunction authenticator(req, res, next) {\n  // assuming your session management uses req.session:\n  if(req.session.authenticated) {\n    return next();\n  }\n  next({status:403, message: \"not authorised to call API methods\"});\n}\n\nflickr.proxy(app, \"/service/rest/\", authenticator);\n```\n\n\n## Upload photos to Flickr\n\nIf you're running the code server-side, and you've authenticated with Flickr already, you can use the `Flickr.upload` function to upload individual photos, or batches of photos, to your own account (or, the account that is tied to the API key that you're using).\n\n```\nFlickr.authenticate(FlickrOptions, function(error, flickr) {\n  var uploadOptions = {\n    photos: [{\n      title: \"test\",\n      tags: [\n        \"happy fox\",\n        \"test 1\"\n      ],\n      photo: __dirname + \"/test.jpg\"\n    },{\n      title: \"test2\",\n      tags: \"happy fox image \\\"test 2\\\" separate tags\",\n      photo: __dirname + \"/test.jpg\"\n    }]\n  };\n\n  Flickr.upload(uploadOptions, FlickrOptions, function(err, result) {\n    if(err) {\n      return console.error(error);\n    }\n    console.log(\"photos uploaded\", result);\n  });\n});\n```\n\nFor the list of available upload properties, see the [Flickr Upload API](https://www.flickr.com/services/api/upload.api.html) page.\n\n## Download data from Flickr\n\nYou can use this module to very easily download all your Flickr content, using the built in `downsync` function:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = { ... };\nFlickr.authenticate(flickrOptions, flickrapi.downsync());\n```\n\nThat's all you need to run. The package will generate a data directory with your images in `./data/images` (in several sizes), and the information architecture (metadata, sets, collections, etc) in `./data/ia`.\n\nIf you want this in a different directory, you can pass the dir as an argument to the downsync function:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = { ... };\nFlickr.authenticate(flickrOptions, flickrapi.downsync(\"userdata/me\"));\n```\n\nThis will now create a `./data` for the flickr API information, but also a `./userdata/me/` directory that contains the `images` and `ia` dirs with your personal data.\n\n### Downloading shortcut: one-step downsyncing\n\nIf you just want to immediately downsync all your data right now, simply use the `test.js` application with the --downsync runtime argument: add your Flickr API key information to the `.env` file and then run:\n\n`$> node test --downsync`\n\nRun through the authentication procedure, and then just wait for it to finish. Once it's done, you should have a local mirror of all your Flickr data.\n\n#### (Re)syncing with Flickr in your code\n\n(Re)syncing is a mostly a matter or running the downsync function again. This will update anything that was updated or added on Flickr, but will not delete anything from your local mirror that was deleted from Flickr unless specifically told to do so, by passing a second argument (internally known as the \"removeDeleted\" flag in the code) to the `downsync` function call:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrOptions = { ... };\nFlickr.authenticate(flickrOptions, flickrapi.downsync(\"userdata/me\", true));\n```\n\nIf `true`, this will delete local files that were removed on Flickr (e.g. photos that you didn't like anymore, etc). If `false`, or omitted, no pruning of the local mirror will be performed.\n\n## Use your Flickr data in another application\n\nIf you downloaded all your Flickr data, you can use these in your own node apps by \"dry loading\" Flickr:\n\n```\nvar Flickr = require(\"flickrapi\"),\n    flickrData = Flickr.loadLocally();\n```\n\nThis will give you an object with the following structure:\n\n```\n{\n  photos: [photo objects],\n  photo_keys: [photo.id array, sorted on publish date],\n  photosets: [set objects],\n  photoset_keys: [set.id array, sorted on creation date],\n  collections: [collection objects],\n  collection_keys: [collection.id array, sorted on title],\n}\n```\n\nNot sure what these objects look like? head over to your `./data/ia` directory and just open a .json file in your favourite text editor.\n\nThe `loadLocally` function can take two arguments, namely a location where the ia data can be found, and an options object. If you want to pass in an options object you *must* supply a location, too.\n\n```\nflickrData = Flickr.loadLocally(\"./userdata\", {\n  loadPrivate: false\n});\n```\n\nCurrently the options object only has one meaningful property, `loadPrivate`, which determines whether or not photos and photosets that are marked \"not public\" in Flickr show up in the `photo_keys` and `photoset_keys` lists.\n\n\n# An example of a first run\n\n## Fetching Flickr's most up to date API definitions\n\nOn first run, the package will fetch all known methods from Flickr, and cache them for future use. This can take a bit, as there are a fair number of methods, but is inconsequential on subsequent package loading.\n\n## Authenticate your API key with Flickr\n\nOn first run, the authentication function will notice that there are no `access_token` and `access_token_secret` values set, and will negotiate these with Flickr using their oauth API, based on the permissions you request for your API key.\n\nBy default, the only permissions are \"read\" permissions, but you can override this by adding a `permissions` property to the options object:\n\n* `permissions: \"read\"` will give the app read-only access (default)\n* `permissions: \"write\"` will give it read + write access\n* `permissions: \"delete\"` will give it read, write and delete access\n\nNote that you cannot make use of the upload functions unless you authenticate with `write` or `delete` permissions.\n\n### An example run\n\nRunning the app will show output such as the following block:\n\n```\n$> node app\n{ oauth_callback_confirmed: 'true',\n  oauth_token: '...',\n  oauth_token_secret: '...' }\nprompt: oauth_verifier: _\n```\n\nOnce the app reaches this point it will open a browser, allowing you to consent to the app accessing your most private of private parts. On Flickr, at least. If you agree to authorize it, you will get an authorisation code that you need to pass so that the flickrapi can negotiate access tokens with Flickr.\n\nDoing so continues the program:\n\n```\n$> node app\n{ oauth_callback_confirmed: 'true',\n  oauth_token: '...',\n  oauth_token_secret: '...' }\nprompt: oauth_verifier: 123-456-789\n\nAdd the following variables to your environment:\n\nexport FLICKR_USER_ID=\"12345678%40N12\"\nexport FLICKR_ACCESS_TOKEN=\"72157634942121673-3e02b190b9720d7d\"\nexport FLICKR_ACCESS_TOKEN_SECRET=\"99c038c9fc77673e\"\n```\n\nThese are namespaced environment variables, which works really well with env packages like [habitat](https://www.npmjs.com/package/habitat),\nso if you're going to use a namespace-aware enviroment parser, simply add these variables\nto your environment, or put them in an `.env` file and then parse them in.\n\nIf you would prefer to use plain `process.env` consulting, remove the `FLICKR_` namespace\nprefix, and then pass `process.env` as options object.\n\nAlternatively, if you don't mind hardcoding values (but **be careful never to check that code\nin, because github gets mined by bots for credentials**) you can put them straight into your\nsource code:\n\n```\nvar FlickrOptions = {\n      api_key: \"your API key\",\n      secret: \"your API key secret\",\n      user_id: \"...\",\n      access_token: \"...\",\n      access_token_secret: \"...\"\n    }\n```\n\nThe flickrapi package will now be able to authenticate with Flickr without constantly needing to ask you for permission to access data.\n\n## Using your own OAuth callback endpoint\n\nBy default the oauth callback is set to \"out-of-band\". You can see this in the `.env` file as the `FLICK_CALLBACK=\"oob\"` parameter, but if this is omitted the code falls back to oob automatically. For automated processes, or if you don't want your uers to have to type anything in a console, you can override this by setting your own oauth callback endpoint URL.\n\nUsing a custom callback endpoint, the oauth procedure will contact the indicated endpoint with the authentication information, rather than requiring your users to manually copy/paste the authentication values.\n\n**Note** your users will still need to authenticate the app from a browser!\n\nTo use a custom endpoint, add the URL to the options as the `callback` property:\n\n```\nvar options = ...;\noptions.callback: \"http://.../...\";\nFlickr.authenticate(options, function(error, flickr) {\n  ...\n}\n```\n\nYou can make your life easier by using an environment variable in the `.env` file rather than hardcoding your endpoint url:\n\n```\nexport FLICKR_CALLBACK=\"http://...\"\n```\n\nThe callback URL handler will at its minimum need to implement the following middleware function:\n\n```\nfunction(req, res) {\n  res.write(\"\");\n  options.exchange(req.query);\n}\n```\n\nHowever, having the response tell the user that authorisation was received and that they can safely close this window/tab is generally a good idea.\n\nIf you wish to call the exchange function manually, the object expected by `options.exchange` looks like this:\n\n```\n{\n  oauth_token: \"...\",\n  oauth_verifier: \"...\"\n}\n```\n\n# Advanced topics\n\nIf all you wanted to know was how to use the flickrapi library, you can stop reading. However, there's some more magic built into the library that you might be interested in, in which case you should totally keep reading.\n\n## Custom authentication: browserless, noAPI, and silent\n\nThere are a number of special options that can be set to effect different authentication procedures. Calling the authenticate function with an options object means the following options can also be passed:\n\n```\noptions = {\n  ...\n\n  // console.logs the auth URL instead of opening a browser for it.\n  nobrowser: true,\n\n  // only performs authentication, without building the Flickr API.\n  noAPI: true,\n\n  // suppress the default console logging on successful authentication.\n  silent: true,\n\n  // suppress writing progress bars to stdout\n  progress: false\n\n  ...\n}\n```\n\nIf you use the `noAPI` option, the authentication credentials can be extracted from the options object inside the callback function that you pass along. The `options.access_token` and `options.access_token_secret` will contain the result of the authentication procedure.\n\n\n## (Re)compiling the client-side library\n\nIf, for some reason, you want to (re)compile the client-side library, you can run the\n```\n$> node compile\n```\ncommand to (re)generate a flickrapi.js client-side library, saved to the `browser` directory. This generates a sparse library that will let you call all public methods (but currently not any method that requires read-private, write, or delete permissions), but will not tell you what's wrong when errors occur.\n\nIf you need the extended information, for instance in a dev setting, use\n\n```\n$> node compile dev\n```\nto generate a flickrapi.dev.js library that has all the information needed for developing work; simply use this during development and use the flickrapi.js library in production.\n\nNote that no `min` version is generated; For development there is no sense in using one, and the savings on the production version are too small to matter (it's only 10kb smaller). If your server can serve content gzipped, the minification will have no effect on the gzipped size anyway (using gzip, the plain library is ~4.5kb, with the dev version being ~30kb).\n\n## The options object\n\nOnce you have a Flickr API object in the form if the `flickr` variable, the options can be found as `flickr.options` so you don't need to pass those on all the time. This object may contain any of the following values (some are quite required, others are entirely optional, and some are automatically generated as you make Flickr API calls):\n\n### api_key\nyour API key.\n\n### secret\nyour API key secret.\n\n###user_id\nyour user id, based on your first-time authorisation.\n\n###access_token\nthe preauthorised Flickr access token.\n\n###access_token_secret\nits corresponding secret.\n\n###oauth_timestamp\nthe timestamp for the last flickr API call.\n\n###oauth_nonce\nthe cryptographic nonce that request used.\n\n###force_auth\n\ntrue or false (defaults to false) to indicate whether to force oauth signing for functions that can be called both key-only and authenticated for additional data access (like the photo search function)\n\n###retry_queries\nif used, Flickr queries will be retried if they fail.\n\n###afterDownsync\noptional; you can bind an arg-less callback function here that is called after a downsync() call finishes.\n\n###permissions\noptional 'read', 'write', or 'delete'. defaults to 'read'.\n\n###nobrowser\n\noptional boolean, console.logs the auth URL instead of opening a browser window for it.\n\n###noAPI\noptional boolean, performs authentication without building the Flickr API object.\n\n###silent\noptional boolean, suppresses the default console logging on successful authentication.\n\n###progress\noptional boolean, suppresses writing progress bars to stdout if set to `false`\n\n###requestOptions\nadds ability to pass default options for [request](https://github.com/request/request#requestdefaultsoptions) module\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Pomax/node-flickrapi.git"
  },
  "scripts": {
    "test": "node test"
  },
  "version": "0.6.0"
}
